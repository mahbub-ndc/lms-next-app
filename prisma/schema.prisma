
generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  courses       Course[]
  sessions      Session[]
  accounts      Account[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Course {
  id               String       @id @default(uuid())
  title            String
  description      String
  fileKey          String
  price            Int
  duration         Int
  category         String
  smallDescription String
  slug             String       @unique
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  level            CourseLevel  @default(Beginner)
  status           CourseStatus @default(Draft)

  userId  String
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter Chapter[]
}

enum CourseLevel {
  Beginner
  Intermediate
  Advanced
}

enum CourseStatus {
  Draft
  Published
  Archive
}

model Chapter {
  id        String   @id @default(uuid())
  title     String
  position  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  Course   Course   @relation(fields: [courseId], references: [id])
  courseId String
  lessons   Lesson[]
}

model Lesson {
  id           String  @id @default(uuid())
  title        String
  description  String?
  thumbnailKey String?
  videoKey     String?
  position  Int

  Chapter   Chapter @relation(fields: [chapterId], references: [id])
  chapterId String
}
